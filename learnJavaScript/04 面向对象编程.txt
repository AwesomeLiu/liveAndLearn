面向对象编程
  ** JS利用原型链的方式实现所谓的“继承”，但本质是把一个对象的原型指向另一个对象

  ** 在编写JS代码时，不要直接用obj.__proto__去改变一个对象的原型，而且低版本IE不支持

  ** Object.create() 传入一个原型对象，创建一个基于该原型的新对象，新对象没有任何属性

创建对象
  ** JS对每个创建的对象都会设置一个原型，指向它的原型对象

  ** 当用obj.xxx访问一个对象的属性时，JS引擎现在当前对象上查找该属性，如果没有找到，就到其原型对象上找，一直追溯到Object.prototype对象。若最后还没有找到，则返回undefined

  ** 所有函数都可以调用apply()方法

构造函数
  ** new关键词 将一个普通函数变成一个构造函数，绑定的this指向新创建的对象，并默认返回this

  ** 用new关键词创建的对象还从原型上获得了一个constructor属性，它指向函数本身，详见js文件第180-194行

  ** 为区分普通函数与构造函数，约定，构造函数首字母大写，普通函数首字母小写

原型继承
  JS的原型继承实现方式是：
  1. 定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this

  2. 借助中间函数F实现原型链继承，最好通过封装的inherits函数完成

  3. 继续在新的构造函数的原型上定义新方法

  ** 详见js文件第196-264行

Class继承 (ES6新增)
  ** class关键词定义对象，详见js文件第266-277行

  ** extends 继承，详见js文件第279-292行
