**** 本章的代码将在VS Code上给出，文件在E:\NodeCode里 ****

WebSocket
  ** HTML5新增的协议，在浏览器和服务器之间建立一个不受限的双向通信的通道

  ** HTTP协议是一个请求-响应协议，请求必须先由浏览器发给服务器，服务器才能响应这个请求，再把数据发送给浏览器

  ** 在浏览器中实现实时聊天或在线多人游戏的方法
  1. 借助Flash插件
  2. 轮询或Comet
  -> 轮询是指浏览器通过JS启动一个定时器，然后以固定的间隔给服务器发请求，询问服务器有没有新消息
  ---> 缺点是：1. 实时性不够 2. 且频繁的请求会给服务器带来极大的压力

  -> Comet本质也是轮询，但在没有消息的情况下，服务器先拖一段时间，等到有消息了再回复
  ---> 这个机制虽然暂时解决了实时性问题，但是它带来了新的问题：
  1. 以多线程模式运行的服务器会让大部分线程大部分时间都处于挂起状态，浪费服务器资源
  2. 一个HTTP连接在长时间没有数据传输的情况下，链路上的任何一个网关都可能关闭这个连接，而网关是不可控的，这就要求Comet连接必须定期发一些ping数据表示连接正常工作

  ** WebSocket协议并不是全新的协议，而是利用HTTP协议来建立连接

WebSocket协议
  ** 创建WebSocket连接
  1. WebSocket连接必须由浏览器发起
  -> 请求协议是一个标准的HTTP请求，格式如下

  GET ws://localhost:3030/ws/ws/chat HTTP/1.1
  Host: localhost
  Upgrade: websocket
  Connection: Upgrade
  Origin: http://localhost:3000
  Sec-WebSocket-Key: client-random-string
  Sec-WebSocket-Version: 13

  -> 该请求和普通的HTTP请求有几点不同：
  (1) GET请求的地址不是类似 /path/ 而是以 ws:// 开头的地址
  (2) 请求头 Upgrade: websocket 和 Connection: Upgrade 表示这个连接将要被转换为WebSocket连接
  (3) Sec-WebSocket-Key 是用于标识这个连接，并非用于加密数据
  (4) Sec-WebSocket-Version 指定了WebSocket的协议版本

  2. 服务器如果接受该请求，就会返回如下响应

  HTTP/1.1 101 Switching Protocols
  Upgrade: websocket
  Connection: Upgrade
  Sec-WebSocket-Accept: server-random-string

  -> 该响应代码101表示本次连接的HTTP协议即将被更改，更改后协议就是Upgrade: websocket 指定的WebSocket协议

  ** 版本号和子协议规定了双方能理解的数据格式，以及是否支持压缩等等
  -> 如果仅使用WebSocket的API，就不需要关心这些

  ** 当WebSocket连接建立成功，浏览器和服务器可以随时主动发送消息给对方
  -> 消息分为两种：1. 文本 2. 二进制数据
  -> 通常发送JSON格式的文本，便于浏览器处理

  ** HTTP协议建立在TCP协议基础上，TCP协议本身实现了全双工通信，但是HTTP协议的请求-应答机制限制了全双工通信。WebSocket连接建立以后，其实只是简单规定了通信不使用HTTP协议

  ** 安全的WebSocket连接机制和HTTPS类似
  1. 浏览器用 wss://xxx 创建WebSocket连接时，会先通过HTTPS创建安全的连接
  2. 该HTTPS连接升级为WebSocket连接，底层通信走的仍然是安全的 SSL/TLS 协议

  ** 支持WebSocket的主要浏览器
  -> Chrome / Firefox / IE >= 10 / Sarafi >= 6 / Android >= 4.4 / iOS >= 8

  ** 服务器
  -> 由于WebSocket是一个协议，服务器具体怎么实现，取决于所用编程语言和框架本身
  -> Node.js本身支持的协议包括TCP协议和HTTP协议，要支持WebSocket协议，需要对Node.js提供的HTTPServer做额外的开发
  -> 已经有若干基于Node.js的稳定可靠的WebSocket实现，我们直接用npm安装使用即可

ws模块
  ** 详见ws文件夹

  ** 创建WebSocket连接并给服务器发消息
  1. 在VS Code中执行app.js，或用命令行 npm start 执行
  2. 在当前页面下，直接打开可以执行JS代码的浏览器Console，依次输入代码

  // 打开一个WebSocket
  var ws = new WebSocket('ws://localhost:/3000/test');
  // 响应onmessage事件
  ws.onmessage = function (msg) { console.log(msg); };
  // 给服务器发送消息
  ws.send('Hello!');

  一切正常的话，可以看到Console输出如下：

  MessageEvent {isTrusted: true, data: "ECHO: Hello!", origin: "ws://localhost:3000", lastEventId: "", source: null…}

  -> 如果嫌这种方式比较麻烦，可以直接用ws模块提供的WebSocker来充当客户端
  -> 客户端的写法

  let ws = new WebSocket('ws://localhost:3000/test');
  // 打开WebSocket连接后立刻发送一条消息
  ws.on('open', function () {
      console.log(`[CLIENT] open()`);
      ws.send('Hello!');
  });
  // 响应收到的消息
  ws.on('message', function (message) {
      console.log(`[CLIENT] Recevied: ${message}`);
  });

  ---> 在Node环境下，ws模块的客户端可以用于测试服务器端代码，否则，每次必须在浏览器执行JS代码

  ** 同源策略 (Same-origin Policy)
  -> WebSocket协议本身不要求同源策略，即摸个地址为 http://a.com 的网页可以通过WebSocket连接到 ws://b.com
  -> 但浏览器会发送Origin的HTTP头给服务器，服务器可根据Origin拒绝WebSocket请求
  -> 所以，是否要求同源要看服务器端如何检查

  ** 路由
  -> 服务器在响应connection事件时并未检查请求的路径，因此，在客户端打开 ws://localhost:3000/any/path 可以写任意路径
  -> 实际应用中还需要根据不同的路径实现不同的功能

Demo: 聊天室
  ** 详见ws_with_koa文件夹

  ** 统一端口
  -> koa通过3000端口响应HTTP，WebSocketServer可以使用其他端口，但在实际应用中，HTTP和WebSocket都使用标准的80和443端口，不需要暴露新的端口，也不需要修改防火墙规则
  -> 3000端口并非由koa监听，而是koa调用Node标准的http模块创建的http.Server监听，koa只是把响应函数注册到该http.Server中了
  -> 类似的，WebSocketServer也可以把自己的响应函数注册到http.Server中，这样，同一个端口，根据协议，可以分别由koa和ws处理

	 HTTP请求
	    |
	    ↓
    http.Server
	    |
	    ↓
	  ws请求？--------+
	    |             |
	   Y|            N|
	    ↓             ↓
  WebSocketServer  koa app

  -> 把WebSocketServer绑定到同一个端口的关键代码是先获取koa创建的http.Server的引用，再根据http.Server创建WebSocketServer

  let server = app.listen(3000);
  let wss = new WebSocketServer({
      server: server
  });

  -> 浏览器创建WebSocket时发送的仍然是标准的HTTP请求
  -> 无论是WebSocket请求还是普通HTTP请求，都会被http.Server处理
  -> 具体的处理方式是由koa和WebSocketServer注入的回调函数实现
  ---> WebSocketServer会判断请求是不是WS请求，是，处理该请求，不是，仍由koa处理请求
  ---> WS请求会直接由WebSocketServer处理，它根本不会经过koa，koa的任何middleware都没有机会处理该请求

  ** 识别用户身份
  -> 在koa应用中，通过session或cookie很容易认证用户
  -> 简单可行的方案：把用户登陆后的身份写入Cookie，在koa中，使用middleware解析Cookie，把用户绑定到 ctx.state.user 上