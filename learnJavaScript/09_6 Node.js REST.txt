**** 本章的代码将在VS Code上给出，文件在E:\NodeCode里 ****

REST (Representational State Transfer) 一种设计API模式

REST API规范
  1. REST请求仍然是标准的HTTP请求，但除GET请求外，POOST、PUT等请求的body是JSON数据格式，请求的 Content-Type 为 application/json
  2. REST响应返回的结果是JSON数据格式，因此，响应的 Content-Type 也是 application/json

koa处理REST
  ** 详见REST文件夹

  ** 由于POST请求无法在浏览器中直接测试，故通过curl命令在命令提示符窗口测试

开发REST API
  ** 详见REST_API文件夹

  ** 需要考虑的问题
  1. 组织API
  -> 通过固定的前缀区分
  ---> /static/开头的URL是静态资源文件
  ---> /api/开头的URL是REST API
  ---> 其他URL是普通的MVC请求

  -> 使用不同的子域名区分
  ---> 适用于大项目

  2. 统一输出REST
  -> 通过一个middleware给ctx添加一个rest()方法，直接输出JSON数据
  -> 需要根据path判断当前请求是否是一个REST请求
  -> 详见rest.js文件

  3. 处理错误
  -> 客户端会遇到两种类型的REST API错误
  (1) 类似403/404/500等HTTP请求可能发生的错误
  (2) 业务逻辑错误

  -> 200 表示REST成功响应，400 表示REST失败响应
  -> 但绝不能混合其他HTTP错误码

  4. 定义错误码
  -> REST架构本身同样没有标准的错误码定义
  ---> 有的Web应用使用数字作为错误码，如Twitter和微博
  ---> 有的Web应用使用字符串作为错误码，如Youtube

  -> 建议使用字符串作为错误码
  ---> 使用数字作为错误码时，API提供者需要维护一份错误码代码说明表，并且，该文档必须时刻与API发布同步

  -> 定义REST API错误格式如下

	{
		"code": "错误代码",
		"message": "错误描述信息"
	}

  -> 错误代码命名规范为 `大类:子类`

  5. 返回错误
  -> 不要直接调用ctx.rest()，这样控制流程会混乱，并且错误只能在Controller函数中输出

  -> 更好的方式是异步函数直接用throw语句抛出错误，让middleware去处理错误

	user = processLogin(username, password);
	if (user != null) {
		ctx.rest(user);
	} else {
		throw new APIError('auth:user_not_found', 'user not found');
	}

  -> middelware部分见

  -> 这种错误处理的好处在于，不但简化了Controller的错误处理（只需要throw，不需要管其他），并且在遇到非 APIError 的错误时，自动转换错误码为 internal: unknown_error

  -> 受益于async/await语法，在middleware中可以直接用 try...catch 捕获异常
  ---> 如果是callback模式，就无法用 try...catch 捕获，代码结构将混乱得多

  ** 工程文件的规范
  1. REST API的返回值全部是object对象，而不是简单的 number / boolean / null / 数组
  -> 如果返回结果不是object，则客户端反序列化后还需要判断类型，这样方便客户端处理结果

  2. REST API必须使用前缀 /api/

  ** Service
  -> 用products.js封装所有操作，详见products.js文件

  ** API
  -> controllers\api.js文件支持 GET / POST / DELETE 三种请求

  -> 编写API时需注意
  (1) 如果客户端传递了JSON格式的数据（如POST请求），则async函数可以通过ctx.request.body直接访问已经反序列化的JS对象
  ---> 这是由bodyParser()这个middleware完成的
  ---> 若ctx.request.body为undefined，说明缺少middleware，或middleware没有正确配置

  (2) 如果API路径带有参数，参数必须用:(冒号)表示
  ---> DELETE /api/products/:id 客户端传递的URL可能就是/api/products/A001，参数id对应的值为A001，用 ctx.params.id 获得参数

  ---> 如果API路径有多个参数，如 /api/products/:pid/reviews/:rid 则这两个参数分别用 ctx.params.pid 和 ctx.params.rid 获取

  ---> 这个功能由koa-router这个middleware提供
  ---> API路径的参数永远是字符串

  ** MVC模式