try ... catch ... finally
  ** 有错误发生时，执行流程像这样：
  1. 先执行try { ... }的代码
  2. 执行到出错的语句时，后续语句不再继续执行，转而执行catch (e) { ... }代码
  3. 最后执行finally { ... }代码

  ** 没有错误发生时，执行流程像这样：
  1. 先执行try { ... }的代码
  2. 因为没有出错，catch (e) { ... }代码不会被执行
  3. 最后执行finally { ... }代码

throw 抛出错误
  -> JavaScript允许抛出任意对象，包括数字、字符串。但是，最好还是抛出一个Error对象

错误传播
  -> 如果在一个函数内部发生了错误，它自身没有捕获，错误就会被抛到外层调用函数，如果外层函数也没有捕获，该错误会一直沿着函数调用链向上抛出，直到被JavaScript引擎捕获，代码终止执行
  -> 所以，我们不必在每一个函数内部捕获错误，只需要在合适的地方来个统一捕获

异步错误处理
  -> 涉及到异步代码，无法在调用时捕获，原因就是在捕获的当时，回调函数并未执行