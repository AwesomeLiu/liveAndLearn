let 命令
  ** 声明的变量只在let命令所在的代码块内有效

  ** 不存在“变量提升”，详见ES6.js文件第1-9行

  ** 暂时性死区（temporal dead zone，简称TDZ），只要块级作用域存在 `let` 命令，它所声明的变量就绑定该区域，不再受外部影响，详见ES6.js文件第10-18，19-22行
  -> ES6规定，如果区块中存在 `let` 和 `const` 命令，这个区块对这些命令声明的变量形成封闭作用域，凡是在声明前使用这些变量就会报错

  -> 暂时性死区意味着 `typeof` 不再是安全的操作，详见ES6.js文件第24-30行

  ** 不允许重复声明

块级作用域
  1. 防止内层变量覆盖外层变量
  2. 防止循环变量泄露为全局变量

  ** 详见ES6.js文件第32-42行

  ** 允许块级作用域的任意嵌套
  -> 外层作用域无法读取内层作用域的变量，详见ES6.js文件第44-49行
  -> 内层作用域可以定义外层作用域的同名变量，详见ES6.js文件第50-57行

  -> 块级作用域的出现，使得获得广泛应用的立即执行函数表达式（IIFE）不再必要

	// IIFE写法
	(function () {
		var tmp = "";
		...
	}());
	// 块级作用域写法
	{
		let tmp = "";
		...
	}

  ** 允许在块级作用域中声明函数
  -> 在块级作用域中，函数声明语句的行为类似于 `let`，在块级作用域之外不可引用

  -> 浏览器的实现可以不遵守规定，有自己的行为方式

  -> 只对ES6的浏览器实现有效，其他环境的实现不用遵守的规则
  1. 允许在块级作用域内声明函数
  2. 函数声明类似于 `var` 即会提升到全局作用域或函数作用域的头部
  3. 函数声明还会提升到所在的块级作用域的头部

  -> 考虑到环境导致的行为差异太大，因此应避免在块级作用域内声明函数
  ---> 如果确实需要，应该写成函数表达式，而不是函数声明语句

  -> ES6的块级作用域允许声明函数的规则，只在使用大括号的情况下成立，没有大括号会报错

do表达式
  ** 本质上，块级作用域是一个语句，将多个操作封装在一起，没有返回值

	{
		let t = f();
		t = t * t + 1;
	}

  但在块级作用域以外，没有办法得到 t 的值，因为块级作用域不返回值，除非 t 是全局变量

  ** 在块级作用域之前加上 `do` 可使其变为do表达式，可以返回值

	let x = do {
		let t = f();
		t * t + 1;
	};

  这样，x 会得到整个块级作用域的返回值

const 命令
  ** 声明一个只读的常量，一旦声明，常量的值就不能改变
  -> const一旦声明变量，必须立即初始化，只声明不赋值会报错
  -> const只在声明所在的块级作用域内有效，常量不提升，不可重复声明
  -> const保证的是变量指向的内存地址不得改动
  ---> 对于简单类型的数据（数值、字符串、布尔值），相当于常量
  ---> 对于复合类型的数据（对象和数组），变量指向的内存地址保存的是一个指针，指针指向的数据结构是不能控制的

  -> const foo = Object.freeze({}) 将对象冻结，不可写

  -> 将对象彻底冻结的函数

	var constantize = (obj) => {
		Object.freeze(obj);
		Object.keys(obj).forEach((key, i) => {
			if (typeof obj[key] === 'object') {
				constantize(obj[key]);
			}
		});
	};

  ** ES6声明变量的六种方法
  -------------ES5↓
  1. var
  2. function
  -------------ES6↓
  3. let
  4. const
  5. import
  6. class

顶层对象的属性
  ** 在浏览器环境指的是 window 对象
  ** 在Node环境指的是 global 对象

  ** ES6规定 var 和 function 声明的全局变量，是顶层对象的属性；let / const / class 声明的全局变量不属于顶层对象的属性

	var a = 1;
	// 在Node的REPL环境，写成 global.a 或采用通用方法，写成 this.a
	window.a; // 1

	let b = 2;
	window.b; // undefined

global
  ** ES5的顶层对象

	+--------+----------+----------+------------+
	|        |  浏览器  |   Node   | Web Worker |
	+--------+----------+----------+------------+
	| window | 顶层对象 |    X     |      X     |
	+--------+----------+----------+------------+
	|  self  | 顶层对象 |    X     |  顶层对象  |
	+--------+----------+----------+------------+
	| global |     X    | 顶层对象 |      X     |
	+--------+----------+----------+------------+

  为了能够在各种环境都能取到顶层对象，通常使用 `this` 关键字

  ** this的局限性
  1. 全局环境中，this返回顶层对象，但在Node模块和ES6模块中，this返回的是当前模块
  2. 函数中的this，如果函数不是作为对象的方法运行，而是作为函数运行，this指向顶层对象，严格模式下，this会返回undefined
  3. 无论什么模式，new Function('return this')() 返回全局对象，但是如果浏览器使用了CSP（Content Security Policy，内容安全政策），那么 `eval` / `new Function` 这些方法都可能无法使用

  ** 勉强可以在所有情况下取得顶层对象的方法

	// 方法一
	(typeof window !== 'undefined'
		? window
		: (typeof process === 'object' &&
		   typeof require === 'function' &&
		   typeof global  === 'object')
		  ? global
		  : this);

	// 方法二
	var getGlobal = function () {
		if (typeof self !== 'undefined') {
			return self;
		}
		if (typeof window !== 'undefined') {
			return window;
		}
		if (typeof global !== 'undefined') {
			return global;
		}
		throw new Error('unable to locate global object');
	};

  ** 提案：在语言标准层面引入global作为顶层对象，即在所有环境下，global都存在，并可以从它拿到顶层对象
  -> 垫片库 system.global 模拟了该提案