对象
  typeof 123; // 'number'
  typeof NaN; // 'number'
  typeof 'str'; // 'string'
  typeof true; // 'boolean'
  typeof undefined; // 'undefined'
  typeof Math.abs; // 'function'

  typeof null; // 'object'
  typeof []; // 'object'
  typeof {}; // 'object'

包装对象
  number/boolean/string都有包装对象，分别为Number/Boolean/String，但类型变为object类型
  使用 new 关键字创建包装对象(不推荐)
  若不使用则被当做普通函数，不改变对象类型

  总结一下，有这么几条规则需要遵守：

  * 不要使用new Number()、new Boolean()、new String()创建包装对象

  * 用parseInt()或parseFloat()来转换任意类型到number

  * 用String()来转换任意类型到string，或者直接调用某个对象的toString()方法，除了null和undefined

  ** number对象直接调用toString()会报SyntaxError，详见js文件第175-178行

  * 通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {...}

  * typeof操作符可以判断出number、boolean、string、function和undefined

  * 判断Array要使用Array.isArray(arr)

  * 判断null请使用myVar === null

  * 判断某个全局变量是否存在用typeof window.myVar === 'undefined'

  * 函数内部判断某个变量是否存在用typeof myVar === 'undefined'

Date 日期与时间
  Date.getFullYear();     获取年份
  Date.getMonth();        获取月份，0-11
  Date.getDate();         获取日期，1-31
  Date.getDay();          获取星期，1-7
  Date.getHours();        获取小时
  Date.getMinutes();      获取分钟
  Date.getSeconds();      获取秒钟
  Date.getMilliseconds(); 获取毫秒
  Date.getTime();         时间戳，表示从1970年1月1日零时整的GMT时区开始到现在的毫秒数
  Date.toLocaleString();  本地时间，显示的字符串与操作系统设定的格式有关
  Date.toUTCString();     UTC时间

RegExp 正则表达式
  \d     匹配一个数字
  \w     匹配一个字母或数字
  \s     匹配一个空格(包括Tab等空白符)

  .      匹配一个任意字符
  *      匹配多个任意字符
  +      表示至少一个字符
  ?      表示0个或1个字符

  {n}    表示n个字符
  {n,m}  表示n-m个字符

  ** 精确匹配 用[]表示范围

  [0-9a-zA-Z\_]   匹配一个数字、字母或下划线
  [0-9a-zA-Z\_]+  匹配至少由一个数字、字母或者下划线组成的字符串
  [a-zA-Z\_\$][0-9a-zA-Z\_\$]*  匹配JavaScript允许的变量名

  A|B  匹配A或B
  ^    表示行的开头
  ^\d  必须以数字开头
  $    表示行的结束
  \d$  必须以数字结束

  创建正则表达式
  1. /.../
  2. new RegExp('...') 反斜杠要转义！

  ** 分组
  ()       表示要提取的分组
  exec()   若正则表达式中定义了组，则可以在RegExp对象上提取出子串，匹配失败返回null

  ** 正则匹配默认是贪婪匹配

  g 全局搜索
  i 忽略大小写
  m 执行多行匹配

JSON(JavaScript Object Notation) 一种数据交换格式
  ** 数据类型 number/boolean/string/null/array/object

  ** 三个必须：字符集必须是UTF-8；字符串必须使用双引号；Objece的键必须用双引号

  ** JSON.stringify({1}, {2}, {3}) 将对象序列化为JSON格式的字符串
  1. 对象
  2. 控制如何筛选对象的键值，可传入指定属性，函数
  3. 缩进

  ** Object.toJSON() 直接返回JSON应该序列化的数据

  ** 反序列化
  JSON.parse() 将JSON格式的字符串变成一个JS对象