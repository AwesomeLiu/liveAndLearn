jQuery选择符
  ** id选择器
  -> $('#abc') 返回id="abc"的节点

  ** 类选择器
  -> $('.abc') 返回所有class="abc"的节点

  ** tag选择器
  -> $('p') 返回所有<p>节点

  ** 属性选择器
  -> $('[name=abc]') 返回所有name='abc'的节点
  -> 可使用 ^ (前缀查找)或 $ (后缀查找)

  ** 组合查找
  -> $('input[name=abc]') 返回所有name='abc'的<input>节点
  -> $('p.abc') 返回所有class='abc'的<p>节点

  ** 多项选择器
  -> $('p.abc1, p.abc2') 返回class='abc1'的<p>节点、class='abc2'的<p>节点和 class='abc1 abc2'的<p>节点

  ** 层级选择器
  -> $('ancestor descendant')
  -> $('ul li.abc') 返回<ul>节点下class='abc'的<li>节点

  ** 子选择器
  -> $('parent>child')

  ** 过滤器
  -> $('ul li:first-child')     返回<ul>下第一个<li>节点
  -> $('ul li:last-child')      返回<ul>下最后一个<li>节点
  -> $('ul li:nth-child(n)')    返回<ul>下第N个<li>节点，N从1开始
  -> $('ul li:nth-child(even)') 返回<ul>下序号为偶数的<li>节点
  -> $('ul li:nth-child(odd)')  返回<ul>下序号为奇数的<li>节点

  ** 表单相关选择器
  -> :input：可以选择<input>，<textarea>，<select>和<button>；
  -> :file：可以选择<input type="file">，和input[type=file]一样
  -> :checkbox：可以选择复选框，和input[type=checkbox]一样
  -> :radio：可以选择单选框，和input[type=radio]一样
  -> :focus：可以选择当前输入焦点的元素，例如把光标放到一个<input>上，用$('input:focus')就可以选出
  -> :checked：选择当前勾上的单选框和复选框，用这个选择器可以立刻获得用户选择的项目，如$('input[type=radio]:checked')
  -> :enabled：可以选择可以正常输入的<input>、<select>等，也就是没有灰掉的输入
  -> :disabled：和:enabled正好相反，选择那些不能输入的

  ** 查找
  -> find()   在某个节点的所有子节点中查找
  -> parent() 从当前节点向上一层查找
  -> next()   对于同层节点，向后查找
  -> prev()   对于同层节点，向前查找

  ** 过滤
  -> filter() 过滤不符合选择器条件的节点或传入一个函数进行过滤
  ---> 函数内部的this被绑定为DOM对象，不是jQuery对象

  -> map()    把一个jQuery对象包含的若干DOM节点转化为其他对象
  -> first()  相当于 :first-child
  -> last()   相当于 :last-child
  -> slice()  与数组的slice()方法一致

操作DOM
  ** 修改Text和HTML
  -> text() 获取节点的文本
  -> html() 获取节点的原始HTML文本
  ---> 两者传入参数均变成设置文本

  ** 修改CSS
  -> css('name', 'value')
  -> 方法作用于DOM节点的style属性，具有最高优先级

  ** 修改class
  -> hasClass('abc')    判断是否包含类abc
  -> addClass('abc')    添加类abc
  -> removeClass('abc') 删除类abc

  ** 显示和隐藏DOM
  -> show() 显示DOM
  -> hide() 隐藏DOM

  ** 获取DOM信息
  -> xx.width()             获取xx的宽度
  -> xx.height()            获取xx的高度
  -> xx.attr('name')        获取xx的属性'name'的值
  -> xx.attr('name', 'abc') 将xx的属性'name'的值变为'abc'
  -> xx.removeAttr('name')  删除'name'属性
  -> xx.prop()              与attr()类似，区别详见js文件第466-475行
  -> xx.is()                与prop()类似，区别详见js文件第476-478行

  ** 操作表单
  -> val() 获取和设置对应的表单元素的value属性

修改DOM结构
  ** 添加DOM
  -> append()  添加新的DOM节点
  ---> 可以传入字符串、原始DOM对象、jQuery对象和函数对象
  ---> 把DOM添加到最后
  ---> 若添加的DOM节点已经存在HTML文档中，则会先删除该节点，然后再添加，变成了移动DOM

  -> prepend() 把DOM节点添加到最前
  -> after()   在指定节点后添加DOM节点
  -> before()  在指定节点前添加DOM节点

  ** 删除DOM
  -> remove()

事件
  ** on 绑定事件

  ** 鼠标事件
  -> click      鼠标单击时触发
  -> dbclick    鼠标双击时触发
  -> mouseenter 鼠标进入时触发
  -> mouseleave 鼠标移出时触发
  -> mousemove  鼠标在DOM内部移动时触发
  -> hover      鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave

  ** 键盘事件
  -> keydown    键盘按下时触发
  -> keyup      键盘松开时触发
  -> keypress   按一次键后触发

  ** 其他事件
  -> focus      当DOM获得焦点时触发
  -> blur       当DOM失去焦点时触发
  -> change     当<input>、<select>或<textarea>的内容改变时触发
  -> submit     当<form>提交时触发
  -> ready      当页面被载入并且DOM树完成初始化后触发
  ---> $(document).ready(function () {...});
  ---> 或简写为 $(function () {...});

  ** Event对象 事件参数

  ** off 取消绑定

  ** 事件触发条件
  -> change 详见js文件第480-490行

  ** 浏览器安全限制
  -> 在浏览器中，有些JavaScript代码只有在用户触发下才能执行，例如，window.open()函数

动画
  ** show / hide 显示和隐藏DOM，传递一个时间参数（单位：ms）或'slow'/'fast'即变成动画
  -> toggle()方法 根据当前状态决定是show()还是hide()
  -> 从左上角逐渐展开或收缩

  ** slideUp / slideDown 垂直方向上逐渐展开或收缩
  -> slideToggle()方法 根据当前状态决定是slideUp()还是slideDown()

  ** fadeIn / fadeOut 淡入淡出
  -> fadeToggle()方法 根据当前状态决定是fadeIn()还是fadeOut()

  ** animate({1}, {2}, {3}) 自定义动画
  1. DOM元素最终的CSS状态
  2. 动画时间
  3. 动画结束时触发的函数

  ** 串行动画
  -> delay() 暂停

  ** 限制
  -> 动画效果涉及到改变高度等CSS属性时，DOM元素应该设置display = block
  -> jQuery没有实现background-color的动画效果，用animate()设置background-color无效
  ---> 这种情况下可以使用CSS3的transition实现动画效果

AJAX
  ** ajax(url, settings) 处理AJAX请求
  -> settings对象的常用选项
  1. async       是否异步执行AJAX请求，默认为true，千万不要指定为false
  2. method      发送的Method，缺省为'GET'，可指定为'POST'、'PUT'等
  3. contentType 发送POST请求的格式，默认值为'application/x-www-form-urlencoded; charset=UTF-8'，也可以指定为text/plain、application/json
  4. data        发送的数据，可以是字符串、数组或object。如果是GET请求，data将被转换成query附加到URL上，如果是POST请求，根据contentType把data序列化成合适的格式
  5. headers     发送的额外的HTTP头，必须是一个object
  6. dataType    接收的数据格式，可以指定为'html'、'xml'、'json'、'text'等，缺省情况下根据响应的Content-Type猜测

  -> 用回调函数处理返回的数据和出错时的响应，详见js文件第492-503行

  ** get(url, object) GET请求
  -> 第二个参数是object，jQuery自动把它变成query string然后添加到url后面，详见js文件第505-513行

  ** post(url, object) POST请求

  ** getJSON() 快速通过GET获取一个JSON对象

  ** 安全限制
  -> jQuery的AJAX完全封装的是JS的AJAX操作，它的安全限制和用JS写AJAX完全一样
  -> 如果使用JSONP，需在ajax()中设置 jsonp: 'callback'，让jQuery实现JSONP跨域加载数据

扩展
  ** $.fn 给jQuery对象绑定一个新方法
  -> return this; 实现链式操作

  ** $.extend(target, obj1, obj2, ...) 把多个object对象的属性合并到target对象中
  -> 对象越往后优先级越高

  ** 编写一个jQuery插件的原则
  1. 给 $.fn 绑定函数，实现插件的代码逻辑
  2. 插件函数最后要 return this; 以支持链式调用
  3. 插件函数要有默认值，绑定在 $.fn.<pluginName>.defaults 上
  4. 用户在调用时可传入设定值以便覆盖默认值

  -> 编写的扩展只针对某些类型的DOM元素，可以用filter()过滤